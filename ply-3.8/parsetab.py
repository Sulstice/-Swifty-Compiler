
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '47826C40930E6617373869DBA762C2D7'
    
_lr_action_items = {'MAP_TO':([45,],[69,]),'FLOAT':([0,9,22,47,64,69,78,79,80,],[1,1,-9,-10,-11,1,-12,1,1,]),'NE_OP':([27,28,29,31,32,33,34,36,37,39,40,41,73,74,75,76,88,],[-73,48,-67,-54,-69,-58,-72,-48,-68,-70,-71,-63,-55,-59,-49,-64,-69,]),'OR_OP':([27,28,29,30,31,32,33,34,35,36,37,39,40,41,68,71,73,74,75,76,88,],[-73,-44,-67,51,-54,-69,-58,-72,-42,-48,-68,-70,-71,-63,-43,-45,-55,-59,-49,-64,-69,]),'ARRAY':([106,],[110,]),'SEMI':([15,16,17,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,44,68,70,71,72,73,74,75,76,88,90,92,111,114,117,119,124,],[22,-13,-15,47,-73,-44,-67,-40,-54,-69,-58,-72,-42,-48,-68,64,-70,-71,-63,-14,-16,-43,78,-45,-41,-55,-59,-49,-64,-69,99,101,117,121,-33,125,129,]),'CLSTRING':([21,22,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,78,80,82,83,84,85,86,87,93,96,99,101,103,106,120,121,125,126,129,130,135,137,],[27,-9,27,27,-10,-47,-46,27,27,27,-57,-56,-62,-61,27,-60,-52,-51,-53,27,-50,-11,-66,27,-65,-12,27,-31,-32,-29,27,-24,-30,-28,-25,-26,-27,27,27,27,-38,-36,27,-35,-34,-37,-39,]),'PRCNT':([27,29,32,33,34,37,39,40,41,76,88,115,],[-73,-67,-69,55,-72,-68,-70,-71,-63,-64,-69,122,]),'PIPE':([88,134,],[98,136,]),'INT':([0,9,22,47,64,69,78,79,80,],[5,5,-9,-10,-11,5,-12,5,5,]),'MINUS':([27,29,31,32,33,34,37,39,40,41,74,76,88,],[-73,-67,53,-69,-58,-72,-68,-70,-71,67,-59,-64,-69,]),'MULT':([27,29,32,33,34,37,39,40,41,76,88,],[-73,-67,-69,58,-72,-68,-70,-71,-63,-64,-69,]),'IDENTIFIER':([1,4,5,7,8,10,11,12,13,20,21,22,23,24,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,78,80,82,83,84,85,86,87,93,94,96,99,101,103,106,112,120,121,125,126,129,130,135,137,],[-18,16,-17,18,-22,-21,-19,-23,-20,16,32,-9,16,16,32,32,-10,-47,-46,32,32,32,-57,-56,-62,-61,32,-60,-52,-51,-53,32,-50,-11,-66,32,-65,-12,88,-31,-32,-29,88,-24,-30,-28,102,-25,-26,-27,32,32,16,88,-38,-36,88,-35,-34,-37,-39,]),'CLFLOAT':([21,22,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,78,80,82,83,84,85,86,87,93,96,99,101,103,106,120,121,125,126,129,130,135,137,],[34,-9,34,34,-10,-47,-46,34,34,34,-57,-56,-62,-61,34,-60,-52,-51,-53,34,-50,-11,-66,34,-65,-12,34,-31,-32,-29,34,-24,-30,-28,-25,-26,-27,34,34,34,-38,-36,34,-35,-34,-37,-39,]),'RCURLY':([22,47,64,78,79,80,82,83,84,85,86,87,93,96,99,101,121,125,126,129,130,133,135,137,],[-9,-10,-11,-12,81,89,-31,-32,-29,97,-24,-30,-28,-25,-26,-27,-38,-36,130,-35,-34,135,-37,-39,]),'INTEGER':([1,4,5,8,10,11,12,13,20,21,22,23,24,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,78,80,82,83,84,85,86,87,93,96,99,101,103,105,106,112,116,120,121,122,125,126,128,129,130,131,135,137,],[-18,17,-17,-22,-21,-19,-23,-20,17,37,-9,17,17,37,37,-10,-47,-46,37,37,37,-57,-56,-62,-61,37,-60,-52,-51,-53,37,-50,-11,-66,37,-65,-12,37,-31,-32,-29,37,-24,-30,-28,-25,-26,-27,37,109,37,17,123,37,-38,127,-36,37,132,-35,-34,133,-37,-39,]),'COMMA':([16,17,],[23,24,]),'FILTER':([22,47,64,78,80,82,83,84,85,86,87,93,96,99,101,120,121,125,126,129,130,135,136,137,],[-9,-10,-11,-12,91,-31,-32,-29,91,-24,-30,-28,-25,-26,-27,91,-38,-36,91,-35,-34,-37,91,-39,]),'GT_OP':([27,29,31,32,33,34,36,37,39,40,41,73,74,76,88,109,],[-73,-67,-54,-69,-58,-72,59,-68,-70,-71,-63,-55,-59,-64,-69,115,]),'EQUALS':([15,16,17,26,43,44,102,],[21,-13,-15,46,-14,-16,106,]),'FUNC':([0,2,6,9,14,19,22,47,64,78,81,89,97,],[7,7,-4,7,-5,7,-9,-10,-11,-12,-6,-7,-8,]),'$end':([2,3,6,9,14,19,22,47,64,78,81,89,97,],[-2,0,-4,-1,-5,-3,-9,-10,-11,-12,-6,-7,-8,]),'BANG':([27,29,32,34,37,39,40,41,88,],[-73,-67,-69,-72,-68,-70,-71,65,-69,]),'EQ_OP':([27,28,29,31,32,33,34,36,37,39,40,41,73,74,75,76,88,127,],[-73,49,-67,-54,-69,-58,-72,-48,-68,-70,-71,-63,-55,-59,-49,-64,-69,131,]),'LPAREN':([18,95,104,110,],[25,103,108,116,]),'LE_OP':([27,29,31,32,33,34,36,37,39,40,41,73,74,76,88,],[-73,-67,-54,-69,-58,-72,60,-68,-70,-71,-63,-55,-59,-64,-69,]),'STREAM':([98,],[104,]),'LCURLY':([1,5,8,10,11,12,13,77,91,113,],[-18,-17,-22,-21,-19,-23,-20,79,100,120,]),'TRUE':([21,22,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,78,80,82,83,84,85,86,87,93,96,99,101,103,106,120,121,125,126,129,130,135,137,],[39,-9,39,39,-10,-47,-46,39,39,39,-57,-56,-62,-61,39,-60,-52,-51,-53,39,-50,-11,-66,39,-65,-12,39,-31,-32,-29,39,-24,-30,-28,-25,-26,-27,39,39,39,-38,-36,39,-35,-34,-37,-39,]),'RPAREN':([25,27,28,29,30,31,32,33,34,35,36,37,39,40,41,68,71,72,73,74,75,76,107,108,132,],[45,-73,-44,-67,-40,-54,-69,-58,-72,-42,-48,-68,-70,-71,-63,-43,-45,-41,-55,-59,-49,-64,113,114,134,]),'GE_OP':([27,29,31,32,33,34,36,37,39,40,41,73,74,76,88,],[-73,-67,-54,-69,-58,-72,61,-68,-70,-71,-63,-55,-59,-64,-69,]),'OBJECT':([0,9,22,47,64,69,78,79,80,],[8,8,-9,-10,-11,8,-12,8,8,]),'LT_OP':([27,29,31,32,33,34,36,37,39,40,41,73,74,76,88,100,],[-73,-67,-54,-69,-58,-72,63,-68,-70,-71,-63,-55,-59,-64,-69,105,]),'TUPLE':([0,9,22,47,64,69,78,79,80,],[10,10,-9,-10,-11,10,-12,10,10,]),'DIV':([27,29,32,33,34,37,39,40,41,76,88,],[-73,-67,-69,56,-72,-68,-70,-71,-63,-64,-69,]),'OPEN_RNG':([123,],[128,]),'RBRACE':([16,17,43,44,112,118,],[-13,-15,-14,-16,119,124,]),'BOOL':([0,9,22,47,64,69,78,79,80,],[11,11,-9,-10,-11,11,-12,11,11,]),'STRING':([0,9,22,47,64,69,78,79,80,],[12,12,-9,-10,-11,12,-12,12,12,]),'FALSE':([21,22,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,78,80,82,83,84,85,86,87,93,96,99,101,103,106,120,121,125,126,129,130,135,137,],[40,-9,40,40,-10,-47,-46,40,40,40,-57,-56,-62,-61,40,-60,-52,-51,-53,40,-50,-11,-66,40,-65,-12,40,-31,-32,-29,40,-24,-30,-28,-25,-26,-27,40,40,40,-38,-36,40,-35,-34,-37,-39,]),'LET':([22,47,64,78,80,82,83,84,85,86,87,93,96,99,101,120,121,125,126,129,130,135,137,],[-9,-10,-11,-12,94,-31,-32,-29,94,-24,-30,-28,-25,-26,-27,94,-38,-36,94,-35,-34,-37,-39,]),'WHILE':([22,47,64,78,80,82,83,84,85,86,87,93,96,99,101,120,121,125,126,129,130,135,137,],[-9,-10,-11,-12,95,-31,-32,-29,95,-24,-30,-28,-25,-26,-27,95,-38,-36,95,-35,-34,-37,-39,]),'LIST':([0,9,22,47,64,69,78,79,80,],[13,13,-9,-10,-11,13,-12,13,13,]),'AND_OP':([21,22,46,47,51,64,78,80,82,83,84,85,86,87,93,96,99,101,103,106,120,121,125,126,129,130,135,137,],[42,-9,42,-10,42,-11,-12,42,-31,-32,-29,42,-24,-30,-28,-25,-26,-27,42,42,42,-38,-36,42,-35,-34,-37,-39,]),'PLUS':([27,29,31,32,33,34,37,39,40,41,74,76,88,],[-73,-67,54,-69,-58,-72,-68,-70,-71,-63,-59,-64,-69,]),'LBRACE':([106,],[112,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'functions':([0,9,],[2,19,]),'addOP':([31,],[52,]),'statements':([80,120,],[85,126,]),'program':([0,],[3,]),'idList':([4,20,23,24,112,],[15,26,43,44,118,]),'type':([0,9,69,79,80,],[4,20,77,4,20,]),'equOp':([28,],[50,]),'relation':([21,42,46,50,51,62,80,85,103,106,120,126,],[28,28,28,28,28,75,28,28,28,28,28,28,]),'literal':([21,42,46,50,51,52,57,62,66,80,85,103,106,120,126,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'conjunction':([21,46,51,80,85,103,106,120,126,],[30,30,30,30,30,30,30,30,30,]),'mulOP':([33,],[57,]),'arrayStatement':([80,85,120,126,],[82,82,82,82,]),'filterStatement':([80,85,120,126,136,],[83,83,83,83,137,]),'function':([0,2,9,19,],[6,14,6,14,]),'statement':([80,85,120,126,],[86,96,86,96,]),'term':([21,42,46,50,51,52,57,62,80,85,103,106,120,126,],[31,31,31,31,31,31,74,31,31,31,31,31,31,31,]),'streamStatement':([80,85,120,126,],[87,87,87,87,]),'factor':([21,42,46,50,51,52,57,62,66,80,85,103,106,120,126,],[33,33,33,33,33,33,33,33,76,33,33,33,33,33,33,]),'equality':([21,42,46,50,51,80,85,103,106,120,126,],[35,68,35,71,35,35,35,35,35,35,35,]),'addition':([21,42,46,50,51,52,62,80,85,103,106,120,126,],[36,36,36,36,36,73,36,36,36,36,36,36,36,]),'listStatement':([80,85,120,126,],[84,84,84,84,]),'expression':([21,46,51,80,85,103,106,120,126,],[38,70,72,90,90,107,111,90,90,]),'assignment':([80,85,120,126,],[92,92,92,92,]),'unaryOP':([41,],[66,]),'relOp':([36,],[62,]),'declarations':([0,79,],[9,80,]),'whileStatement':([80,85,120,126,],[93,93,93,93,]),'primary':([21,42,46,50,51,52,57,62,66,80,85,103,106,120,126,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declarations','program',1,'p_program','testtest.py',119),
  ('program -> functions','program',1,'p_program','testtest.py',120),
  ('program -> declarations functions','program',2,'p_program','testtest.py',121),
  ('functions -> function','functions',1,'p_functions','testtest.py',125),
  ('functions -> functions function','functions',2,'p_functions','testtest.py',126),
  ('function -> FUNC IDENTIFIER LPAREN RPAREN MAP_TO type LCURLY RCURLY','function',8,'p_function','testtest.py',129),
  ('function -> FUNC IDENTIFIER LPAREN RPAREN MAP_TO type LCURLY declarations RCURLY','function',9,'p_function','testtest.py',130),
  ('function -> FUNC IDENTIFIER LPAREN RPAREN MAP_TO type LCURLY declarations statements RCURLY','function',10,'p_function','testtest.py',131),
  ('declarations -> type idList SEMI','declarations',3,'p_declarations','testtest.py',136),
  ('declarations -> declarations type idList SEMI','declarations',4,'p_declarations','testtest.py',137),
  ('declarations -> type idList EQUALS expression SEMI','declarations',5,'p_declarations','testtest.py',138),
  ('declarations -> declarations type idList EQUALS expression SEMI','declarations',6,'p_declarations','testtest.py',139),
  ('idList -> IDENTIFIER','idList',1,'p_idList','testtest.py',147),
  ('idList -> IDENTIFIER COMMA idList','idList',3,'p_idList','testtest.py',148),
  ('idList -> INTEGER','idList',1,'p_idList','testtest.py',149),
  ('idList -> INTEGER COMMA idList','idList',3,'p_idList','testtest.py',150),
  ('type -> INT','type',1,'p_type','testtest.py',155),
  ('type -> FLOAT','type',1,'p_type','testtest.py',156),
  ('type -> BOOL','type',1,'p_type','testtest.py',157),
  ('type -> LIST','type',1,'p_type','testtest.py',158),
  ('type -> TUPLE','type',1,'p_type','testtest.py',159),
  ('type -> OBJECT','type',1,'p_type','testtest.py',160),
  ('type -> STRING','type',1,'p_type','testtest.py',161),
  ('statements -> statement','statements',1,'p_statements','testtest.py',164),
  ('statements -> statements statement','statements',2,'p_statements','testtest.py',165),
  ('statement -> expression SEMI','statement',2,'p_statement','testtest.py',168),
  ('statement -> assignment SEMI','statement',2,'p_statement','testtest.py',169),
  ('statement -> whileStatement','statement',1,'p_statement','testtest.py',170),
  ('statement -> listStatement','statement',1,'p_statement','testtest.py',171),
  ('statement -> streamStatement','statement',1,'p_statement','testtest.py',172),
  ('statement -> arrayStatement','statement',1,'p_statement','testtest.py',173),
  ('statement -> filterStatement','statement',1,'p_statement','testtest.py',174),
  ('assignment -> LET IDENTIFIER EQUALS expression SEMI','assignment',5,'p_assignment','testtest.py',179),
  ('whileStatement -> WHILE LPAREN expression RPAREN LCURLY statements RCURLY','whileStatement',7,'p_while','testtest.py',184),
  ('listStatement -> LET IDENTIFIER EQUALS LBRACE idList RBRACE SEMI','listStatement',7,'p_list','testtest.py',188),
  ('listStatement -> LET IDENTIFIER EQUALS LBRACE RBRACE SEMI','listStatement',6,'p_list','testtest.py',189),
  ('filterStatement -> FILTER LCURLY LT_OP INTEGER GT_OP PRCNT INTEGER EQ_OP INTEGER RCURLY','filterStatement',10,'p_filter','testtest.py',198),
  ('streamStatement -> IDENTIFIER PIPE STREAM LPAREN RPAREN SEMI','streamStatement',6,'p_streamOperation','testtest.py',202),
  ('arrayStatement -> LET IDENTIFIER EQUALS ARRAY LPAREN INTEGER OPEN_RNG INTEGER RPAREN PIPE filterStatement','arrayStatement',11,'p_openrange','testtest.py',214),
  ('expression -> conjunction','expression',1,'p_expression','testtest.py',223),
  ('expression -> conjunction OR_OP expression','expression',3,'p_expression','testtest.py',224),
  ('conjunction -> equality','conjunction',1,'p_conjunction','testtest.py',228),
  ('conjunction -> AND_OP equality','conjunction',2,'p_conjunction','testtest.py',229),
  ('equality -> relation','equality',1,'p_equality','testtest.py',234),
  ('equality -> relation equOp equality','equality',3,'p_equality','testtest.py',235),
  ('equOp -> EQ_OP','equOp',1,'p_equOp','testtest.py',240),
  ('equOp -> NE_OP','equOp',1,'p_equOp','testtest.py',241),
  ('relation -> addition','relation',1,'p_relation','testtest.py',245),
  ('relation -> addition relOp relation','relation',3,'p_relation','testtest.py',246),
  ('relOp -> LT_OP','relOp',1,'p_relOp','testtest.py',251),
  ('relOp -> LE_OP','relOp',1,'p_relOp','testtest.py',252),
  ('relOp -> GT_OP','relOp',1,'p_relOp','testtest.py',253),
  ('relOp -> GE_OP','relOp',1,'p_relOp','testtest.py',254),
  ('addition -> term','addition',1,'p_addition','testtest.py',258),
  ('addition -> term addOP addition','addition',3,'p_addition','testtest.py',259),
  ('addOP -> PLUS','addOP',1,'p_addOP','testtest.py',266),
  ('addOP -> MINUS','addOP',1,'p_addOP','testtest.py',267),
  ('term -> factor','term',1,'p_term','testtest.py',271),
  ('term -> factor mulOP term','term',3,'p_term','testtest.py',272),
  ('mulOP -> MULT','mulOP',1,'p_mulOP','testtest.py',277),
  ('mulOP -> DIV','mulOP',1,'p_mulOP','testtest.py',278),
  ('mulOP -> PRCNT','mulOP',1,'p_mulOP','testtest.py',279),
  ('factor -> primary','factor',1,'p_factor','testtest.py',283),
  ('factor -> primary unaryOP factor','factor',3,'p_factor','testtest.py',284),
  ('unaryOP -> MINUS','unaryOP',1,'p_unaryOp','testtest.py',289),
  ('unaryOP -> BANG','unaryOP',1,'p_unaryOp','testtest.py',290),
  ('primary -> literal','primary',1,'p_primary','testtest.py',294),
  ('literal -> INTEGER','literal',1,'p_literal','testtest.py',298),
  ('literal -> IDENTIFIER','literal',1,'p_literal','testtest.py',299),
  ('literal -> TRUE','literal',1,'p_literal','testtest.py',300),
  ('literal -> FALSE','literal',1,'p_literal','testtest.py',301),
  ('literal -> CLFLOAT','literal',1,'p_literal','testtest.py',302),
  ('literal -> CLSTRING','literal',1,'p_literal','testtest.py',303),
]
